// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros correct usage: correct usage 1`] = `

import raw from '../macro';

const macro = raw('raw.macro');
const md = raw('./fixtures/markdown.md');
const js = raw('./fixtures/javascript.js');

      ↓ ↓ ↓ ↓ ↓ ↓

const macro =
  '/* istanbul ignore next */\\nimport macro from "./macro";\\n\\nexport default macro;\\n';
const md = "# This is the title\\n\\nThis is the description\\n";
const js =
  'const sum = require("../sum");\\n\\ntest("add two numbers", () => {\\n  const result = sum(1, 2);\\n  expect(result).toEqual(3);\\n});\\n';


`;

exports[`macros dynamic import directory: dynamic import directory 1`] = `

import raw from '../macro';

function dynamic(locale) {
  const md = raw(\`./fixtures/\${locale}/post.md\`);
  return md;
}

const data = dynamic('en')

      ↓ ↓ ↓ ↓ ↓ ↓

var __raw_dynamic__0 = {
  en: "English\\n",
  id: "Bahasa\\n",
};

function dynamic(locale) {
  const md = __raw_dynamic__0[locale];
  return md;
}

const data = dynamic("en");


`;

exports[`macros dynamic import file name with space: dynamic import file name with space 1`] = `

import raw from '../macro';

const a0 = raw(\`./fixtures/en/\${file}\`);

      ↓ ↓ ↓ ↓ ↓ ↓

var __raw_dynamic__0 = {
  "file with space.md": "# File\\n",
  "post.js": 'console.log("test");\\n',
  "post.md": "English\\n",
};
const a0 = __raw_dynamic__0[file];


`;

exports[`macros dynamic import file name: dynamic import file name 1`] = `

import raw from '../macro';

function dynamic(fileName) {
  const md = raw(\`./fixtures/\${fileName}.md\`);
  return md;
}

const data = dynamic('markdown')

      ↓ ↓ ↓ ↓ ↓ ↓

var __raw_dynamic__0 = {
  mark: "## Another markdown\\n",
  markdown: "# This is the title\\n\\nThis is the description\\n",
};

function dynamic(fileName) {
  const md = __raw_dynamic__0[fileName];
  return md;
}

const data = dynamic("markdown");


`;

exports[`macros dynamic import multiple variable: dynamic import multiple variable 1`] = `

import raw from '../macro';

const md = raw(\`./fixtures/\${locale}/\${fileName}.md\`);

      ↓ ↓ ↓ ↓ ↓ ↓

var __raw_dynamic__0 = {
  en: {
    "file with space": "# File\\n",
    post: "English\\n",
  },
  id: {
    post: "Bahasa\\n",
  },
};
const md = __raw_dynamic__0[locale][fileName];


`;

exports[`macros multiple dynamic import: multiple dynamic import 1`] = `

import raw from '../macro';

const a0 = raw('./fixtures/markdown.md');
const a1 = raw(\`./\${fixtureDir}/markdown.md\`);
const a2 = raw(\`./fixtures/\${fileName}\`);

      ↓ ↓ ↓ ↓ ↓ ↓

var __raw_dynamic__1 = {
  "javascript.js":
    'const sum = require("../sum");\\n\\ntest("add two numbers", () => {\\n  const result = sum(1, 2);\\n  expect(result).toEqual(3);\\n});\\n',
  "mark.md": "## Another markdown\\n",
  "markdown.md": "# This is the title\\n\\nThis is the description\\n",
};
var __raw_dynamic__0 = {
  fixtures: "# This is the title\\n\\nThis is the description\\n",
};
const a0 = "# This is the title\\n\\nThis is the description\\n";
const a1 = __raw_dynamic__0[fixtureDir];
const a2 = __raw_dynamic__1[fileName];


`;

exports[`macros no usage: no usage 1`] = `

import raw from '../macro'

      ↓ ↓ ↓ ↓ ↓ ↓



`;

exports[`macros static template literal using interpolation: static template literal using interpolation 1`] = `

import raw from '../macro';

const fileName = 'markdown';
const md = raw(\`./fixtures/\${fileName}.md\`);

      ↓ ↓ ↓ ↓ ↓ ↓

const fileName = "markdown";
const md = "# This is the title\\n\\nThis is the description\\n";


`;

exports[`macros static template literal: static template literal 1`] = `

import raw from '../macro';

const macro = raw('raw.macro');
const md = raw(\`./fixtures/markdown.md\`);
const js = raw(\`./fixtures/javascript.js\`);

      ↓ ↓ ↓ ↓ ↓ ↓

const macro =
  '/* istanbul ignore next */\\nimport macro from "./macro";\\n\\nexport default macro;\\n';
const md = "# This is the title\\n\\nThis is the description\\n";
const js =
  'const sum = require("../sum");\\n\\ntest("add two numbers", () => {\\n  const result = sum(1, 2);\\n  expect(result).toEqual(3);\\n});\\n';


`;
